fill = variable)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.position="bottom",
legend.title=element_blank(),
legend.text=element_text(size = 8)) +
scale_y_continuous(sec.axis = dup_axis()) +
scale_y_log10() +
scale_fill_discrete(
name = "Flux\nd'artificialisation\n2009-2020",
labels = myLevels,
guide = guide_legend(reverse = TRUE)
)
# Filtre des données
statsAix <- f %>%
getStatsComm("13001") %>%
filter(str_detect(variable, "art"))
# Libellés
statsAix <- statsAix %>% mutate(variable = case_when(
variable == "arthab0920" ~ "Habitat",
variable == "artact0920" ~ "Activité",
variable == "artmix0920" ~ "Mixte",
variable == "artinc0920" ~ "Inconnu",
))
# Surfaces en Ha
statsAix$value <- statsAix$value / 10000
# Ordre des barres
# Les plus grands flux en premier
statsAix$variable <- as.character(statsAix$variable)
myLevels <- statsAix$variable[order(statsAix$value)]
statsAix$variable <- factor(statsAix$variable, levels = myLevels)
# Plot
ggplot(data = statsAix,
aes(x = variable,
y = value,
fill = variable)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.position="bottom",
legend.title=element_blank(),
legend.text=element_text(size = 8)) +
scale_y_log10(sec.axis = dup_axis()) +
scale_fill_discrete(
name = "Flux\nd'artificialisation\n2009-2020",
labels = myLevels,
guide = guide_legend(reverse = TRUE)
)
?hcl
# Filtre des données
statsAix <- f %>%
getStatsComm("13001") %>%
filter(str_detect(variable, "art"))
# Libellés
statsAix <- statsAix %>% mutate(variable = case_when(
variable == "arthab0920" ~ "Habitat",
variable == "artact0920" ~ "Activité",
variable == "artmix0920" ~ "Mixte",
variable == "artinc0920" ~ "Inconnu",
))
# Surfaces en Ha
statsAix$value <- statsAix$value / 10000
# Ordre des barres
# Les plus grands flux en premier
statsAix$variable <- as.character(statsAix$variable)
myLevels <- statsAix$variable[order(statsAix$value)]
statsAix$variable <- factor(statsAix$variable, levels = myLevels)
# Couleurs
palette <- c("Habitat"  = colorBlue,
"Activité" = colorRed,
"Mixte"    = colorMagenta,
"Inconnu"  = colorGrey)
# Plot
ggplot(data = statsAix,
aes(x = variable,
y = value,
fill = variable)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.position="bottom",
legend.title=element_blank(),
legend.text=element_text(size = 8)) +
scale_y_log10(sec.axis = dup_axis()) +
scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = myLevels,
values = palette[myLevels],
guide = guide_legend(reverse = TRUE)
)
makePlot <- function(f, codesInsees) {
# Filtre des données
myStats <- f %>%
getStatsComm(codesInsees) %>%
filter(str_detect(variable, "art")) # Pas la colonne surfcom20
# Libellés
myStats <- myStats %>% mutate(variable = case_when(
variable == "arthab0920" ~ "Habitat",
variable == "artact0920" ~ "Activité",
variable == "artmix0920" ~ "Mixte",
variable == "artinc0920" ~ "Inconnu",
))
# Surfaces en Ha
myStats$value <- myStats$value / 10000
# Ordre des barres
# Les plus grands flux en premier
myStats$variable <- as.character(myStats$variable)
myLevels <- myStats$variable[order(myStats$value)]
myStats$variable <- factor(myStats$variable, levels = myLevels)
# Couleurs
palette <- c("Habitat"  = colorBlue,
"Activité" = colorRed,
"Mixte"    = colorMagenta,
"Inconnu"  = colorGrey)
# Plot
ggplot(data = myStats,
aes(x = variable,
y = value,
fill = variable)) +
geom_bar(stat = "identity") +
coord_flip() +
theme(
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.position="bottom",
legend.title=element_blank(),
legend.text=element_text(size = 8)) +
scale_y_log10(sec.axis = dup_axis()) +
scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = myLevels,
values = palette[myLevels],
guide = guide_legend(reverse = TRUE)
)
}
makePlot(f, "13001")
makePlot(f, c("13001", "13041"))
comms <- st_read("C:/Users/mathieu.rajerison/Documents/DATAS/ADMIN-EXPRESS-COG_2-1__SHP__FRA_L93_2020-03-25/ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-03-25/ADMIN-EXPRESS-COG/1_DONNEES_LIVRAISON_2020-03-25/ADE-COG_2-1_SHP_LAMB93_FR/COMMUNE_CARTO.shp")
codesInsees <- comms %>% filter(CODE_EPCI == "200054807") %>% pull(INSEE_COM)
makePlot(f, codesInsees)
ggplot(myStats, aes(x = variable,
y = value,
fill = variable)) +
geom_bar(stat = "identity", width = 1)
myStats <- data.frame(variable = c("Habitat", "Activité", "Mixte", "Inconnu"),
value = c(100, 95, 105, 98))
ggplot(fooStats, aes(x = variable,
y = value,
fill = variable)) +
geom_bar(stat = "identity", width = 1)
fooStats <- data.frame(variable = c("Habitat", "Activité", "Mixte", "Inconnu"),
value = c(100, 95, 105, 98))
ggplot(fooStats, aes(x = variable,
y = value,
fill = variable)) +
geom_bar(stat = "identity", width = 1)
ggplot(fooStats, aes(x = "",
y = value,
fill = variable)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0)
comms <- st_read("C:/Users/mathieu.rajerison/Documents/DATAS/ADMIN-EXPRESS-COG_2-1__SHP__FRA_L93_2020-03-25/ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-03-25/ADMIN-EXPRESS-COG/1_DONNEES_LIVRAISON_2020-03-25/ADE-COG_2-1_SHP_LAMB93_FR/COMMUNE_CARTO.shp") %>% st_set_crs(2154) %>% st_transform(4326)
coords <- c(xmin = 5.884806, ymin = 42.99066, xmax = 6.439616, ymax = 43.39115)
bb <- st_bbox(coords, crs = st_crs(4326)) %>% st_as_sfc
i <- comms %>% st_intersects(bb)
i
w <- which(sapply(i, function(x) length(x) != 0))
codesInsees <- comms2 %>% slice(w) %>% pull(INSEE_COM)
w <- which(sapply(i, function(x) length(x) != 0))
codesInsees <- comms %>% slice(w) %>% pull(INSEE_COM)
codesInsees
getCommsInBB <- function(comms2, xmin, ymin, xmax, ymax) {
bb <- st_bbox(c(xmin = xmin, ymin = ymin, xmax = xmax, ymax = ymax), crs = st_crs(4326)) %>% st_as_sfc
i <- comms2 %>% st_intersects(bb)
w <- which(sapply(i, function(x) length(x) != 0))
codesInsees <- comms2 %>% slice(w) %>% pull(INSEE_COM)
codesInsees
}
getCommsInBB(comms2, xmin = 5.884806, ymin = 42.99066, xmax = 6.439616, ymax = 43.39115)
getCommsInBB <- function(comms, xmin, ymin, xmax, ymax) {
bb <- st_bbox(c(xmin = xmin, ymin = ymin, xmax = xmax, ymax = ymax), crs = st_crs(4326)) %>% st_as_sfc
i <- comms %>% st_intersects(bb)
w <- which(sapply(i, function(x) length(x) != 0))
codesInsees <- comms %>% slice(w) %>% pull(INSEE_COM)
codesInsees
}
getCommsInBB(comms, xmin = 5.884806, ymin = 42.99066, xmax = 6.439616, ymax = 43.39115)
codesInsees <- getCommsInBB(comms, xmin = 5.884806, ymin = 42.99066, xmax = 6.439616, ymax = 43.39115)
makePlot(flux, codesInsees)
fluxAix <- flux %>% filter(idcom == "13001")
kable(fluxAix[, myCols])
library(knitr)
fluxAixL <- gather(fluxAix[, myCols], "variable", "value",
c("arthab0920", "artact0920", "artmix0920", "artinc0920", "surfcom20"))
kable(fluxAixL)
shiny::runApp('shinyapp/app1')
# Flux
flux <<- readRDS("flux.rds") %>% filter(str_detect(idcom, "^(04|05|06|13|83|84)") == "93")
setwd("shinyapp")
flux <<- readRDS("flux.rds") %>% filter(str_detect(idcom, "^(04|05|06|13|83|84)") == "93")
setwd("shinyapp/app1")
setwd("app1")
flux <<- readRDS("flux.rds") %>% filter(str_detect(idcom, "^(04|05|06|13|83|84)") == "93")
library(tidyverse)
flux <<- readRDS("flux.rds") %>% filter(str_detect(idcom, "^(04|05|06|13|83|84)") == "93")
nrow(flux)
?str_detect
flux <<- readRDS("flux.rds") %>% filter(str_detect(idcom, "^(04|05|06|13|83|84)"))
flux
runApp()
runApp()
runApp()
runApp()
readRDS("comms.rds")
runApp()
runApp()
runApp()
coords <- c(5.974598, 44.0858)
pt <- coords %>% st_point %>% st_sfc
pt
pt <- coords %>% st_point %>% st_sfc %>% st_set_crs(4326)
i <- st_intersects(comms, i)
i <- st_intersects(comms, pt)
i
unlist(i)
?st_intersects
sapply(i, function(x) length(i) > 0)
sapply(i, function(x) length(i[[1]]) > 0)
sapply(i, function(x) length(i[[1]]) > 0) %>% which
runApp()
coords <- c(5.96021, 43.56232)
pt <- coords %>% st_point %>% st_sfc %>% st_set_crs(4326)
i <- st_intersects(comms, pt)
which(sapply(i, function(x) length(x) != 0))
runApp()
runApp()
runApp()
runApp()
flux %>% makeStream("13001")
codeInsee <- "13001"
df <- flux %>% getStatsFlux(codeInsee)
df
# L'ordre des inverse dans les streamgraphs
df$type <- factor(df$type, levels = c("Inconnu", "Mixte", "Activité", "Habitat"))
# Plot
df %>%
streamgraph("type", "value", "year", sort = FALSE) %>%
sg_axis_x(1, "Année", "%Y") %>%
sg_fill_manual(rev(palette))
palette
runApp()
runApp()
runApp()
glue("color:{pal['red']}")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('shinyapp/app1')
comms <- st_read("C:/Users/mathieu.rajerison/Documents/DATAS/ADMIN-EXPRESS-COG_2-1__SHP__FRA_L93_2020-03-25/ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-03-25/ADMIN-EXPRESS-COG/1_DONNEES_LIVRAISON_2020-03-25/ADE-COG_2-1_SHP_LAMB93_FR/COMMUNE_CARTO.shp") %>% st_set_crs(2154) %>% st_transform(4326)
library(sf)
library(tidyverse)
comms <- st_read("C:/Users/mathieu.rajerison/Documents/DATAS/ADMIN-EXPRESS-COG_2-1__SHP__FRA_L93_2020-03-25/ADMIN-EXPRESS-COG_2-1__SHP__FRA_2020-03-25/ADMIN-EXPRESS-COG/1_DONNEES_LIVRAISON_2020-03-25/ADE-COG_2-1_SHP_LAMB93_FR/COMMUNE_CARTO.shp") %>% st_set_crs(2154) %>% st_transform(4326)
st_coordinates(comms %>% filter(INSEE_COM == "13001"))
st_coordinates(comms %>% filter(INSEE_COM == "13001") %>% st_centroid)
pt <- c(5.398602, 43.53609) %>% st_point %>% st_sfc %>% st_set_crs(4326)
i <- st_intersects(comms, pt)
w <- which(sapply(i, function(x) length(x) != 0))
codeInsee <- comms$INSEE_COM[w]
codeInsee
getCommCenter <- function(comms, coords) {
pt <- coords %>% st_point %>% st_sfc %>% st_set_crs(4326)
i <- st_intersects(comms, pt)
w <- which(sapply(i, function(x) length(x) != 0))
codeInsee <- comms$INSEE_COM[w]
return(codeInsee)
}
comms %>% getCommCenter(c(5.398602, 43.53609))
shiny::runApp('shinyapp-old/app1')
runApp('shinyapp-old/app1')
runApp('shinyapp-old/app1')
runApp('shinyapp-old/app1')
runApp('shinyapp-old/app1')
runApp('shinyapp-old/app1')
runApp('shinyapp-old/app1')
runApp('shinyapp-old/app1')
palette$bleu
palette_cerema$bleu
paletteCerema$bleu
paletteCerema <- fromJSON(file = "palette_cerema.json")
runApp('shinyapp-old/app1')
setwd("shinyapp-old")
setwd("app1")
paletteCerema <- fromJSON(file = "palette_cerema.json")
paletteCerema$secondaire$bleu
palettCerema
paletteCerema
runApp()
paletteCerema
runApp()
paletteCerema
formatC(1000, big.mark=" ")  # 1,001
formatC(1024, big.mark=" ")  # 1,001
runApp()
format(as.numeric(1000876576655), nsmall=1, big.mark=",")  # 1,000.6
format(as.numeric(1000876576655), nsmall=1, big.mark=",", scientific = FALSE)  # 1,000.6
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/B_REUNIONS/2111-ATELIER-DATAVIZ/shinyapp')
rm(list=ls())
runApp('C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/B_REUNIONS/2111-ATELIER-DATAVIZ/shinyapp')
rm(list=ls())
runApp('C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/B_REUNIONS/2111-ATELIER-DATAVIZ/shinyapp')
runApp('C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/B_REUNIONS/2111-ATELIER-DATAVIZ/shinyapp')
runApp('C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/B_REUNIONS/2111-ATELIER-DATAVIZ/shinyapp')
runApp('C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/B_REUNIONS/2111-ATELIER-DATAVIZ/shinyapp')
comms <- st_read("../data/COMMUNE_CARTO.shp") %>% st_set_crs(2154) %>% st_transform(4326)
library(sf)
library(tidyverse)
comms <- st_read("../data/COMMUNE_CARTO.shp") %>% st_set_crs(2154) %>% st_transform(4326)
comms <- readRDS("notebook/comms.rds")
saveRDS(comms %>% filter(INSEE_REG == 93), "../data/comms.rds")
saveRDS(comms %>% filter(INSEE_REG == 93), "data/comms.rds")
shiny::runApp('shinyapp')
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
glimpse(flux)
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
glimpse(flux)
class(flux$surfcom20)
sapply(names(flux), function(x) class(flux[[x]]) == "character") %>% which %>% {names(flux)[.]}
w <- grep("^(-|[0-9]|\\.)*$", flux$artcom0920, perl = TRUE)
flux$artcom0920[-w] %>% unique
w <- grep("^(-|[0-9]|\\.)*$", flux$artpop1217, perl = TRUE)
flux$artpop1217[-w] %>% unique
w <- grep("^(-|[0-9]|\\.)*$", flux$surfcom20, perl = TRUE)
flux$surfcom20[-w] %>% unique
flux$iddep[-w]
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv", na = c("", "NULL"))
glimpse(flux)
which(flux$surfcom20 == "NULL")
saveRDS(flux, "../shinyapp-old/app1/flux.rds")
library(tidyverse)
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
source("helpers.R", encoding = "UTF-8")
df <- flux %>% getStatsFlux("13001")
library(ggplot2)
p <- ggplot(data = df,
aes(x = year,
y = value,
fill = type)) +
geom_bar(stat = "identity")
p
# Ordre des types
df$type <- as.character(df$type)
df$type <- factor(df$type, levels = c("Habitat", "Activité", "Mixte", "Inconnu"))
# Plot
p <- ggplot(data = df,
aes(x = year,
y = value,
fill = type)) +
geom_bar(stat = "identity") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(vjust = 3),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = 10, colour = "grey60"),
legend.text = element_text(size = 8)
) +
ggtitle("Flux d'artificialisation par année en Ha") +
scale_y_continuous(name = "Ha", expand = c(0, 0))
p
library(colorspace)
colorBlue    <- hcl(h = 220,
c = 50,
l = 80, fixup = TRUE)
colorRed     <- hcl(h = 4,
c = 50,
l = 80, fixup = TRUE)
colorMagenta <- hcl(h = 300,
c = 50,
l = 80, fixup = TRUE)
colorGrey    <- hcl(h = 0,
c = 0,
l = 80, fixup = TRUE)
myPalette <- c("blue" = colorBlue,
"red" = colorRed,
"magenta" = colorMagenta,
"grey" = colorGrey)
demoplot(myPalette, "bar")
hclplot(myPalette)
p +
scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = as.character(myPalette)
)
saveRDS(myPalette, "myPalette.rds")
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(colorBlue,
colorRed,
hcl(h = 300, c = 100, l = 80), # Magenta
colorGrey)
)
library(rjson)
paletteCerema <- fromJSON(file = "palette_cerema.json")
library(rjson)
paletteCerema <- fromJSON(file = "palette_cerema.json")
paletteCerema
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$principale$bleu,
paletteCerema$principale$orange,
paletteCerema$principale$vert,
colorGrey)
)
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$secondaire$bleu,
paletteCerema$secondaire$orange,
paletteCerema$secondaire$vert,
colorGrey)
)
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$complementaire$bleu,
paletteCerema$complementaire$orange,
paletteCerema$complementaire$vert,
colorGrey)
)
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$secondaire$bleu,
paletteCerema$secondaire$orange,
paletteCerema$secondaire$vert,
colorGrey)
)
hclcolorpicker()
hclcolorpicker
hclcolorpicker
hclcolorpicker
hclcolorpicker
library(tidyverse)
library(sf)
comms <- st_read("../data/COMMUNE_CARTO.shp") %>%
st_set_crs(2154) %>%
st_transform(4326)
comms <- st_read("../data/COMMUNE_CARTO/COMMUNE_CARTO.shp") %>%
st_set_crs(2154) %>%
st_transform(4326)
![](files/data-eng2.png)
setwd("shinyapp")
