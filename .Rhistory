c = 50,
l = 80, fixup = TRUE)
colorMagenta <- hcl(h = 300,
c = 50,
l = 80, fixup = TRUE)
colorGrey    <- hcl(h = 0,
c = 0,
l = 80, fixup = TRUE)
myPalette <- c("blue" = colorBlue,
"red" = colorRed,
"magenta" = colorMagenta,
"grey" = colorGrey)
demoplot(myPalette, "bar")
hclplot(myPalette)
p +
scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = as.character(myPalette)
)
saveRDS(myPalette, "myPalette.rds")
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(colorBlue,
colorRed,
hcl(h = 300, c = 100, l = 80), # Magenta
colorGrey)
)
library(rjson)
paletteCerema <- fromJSON(file = "palette_cerema.json")
library(rjson)
paletteCerema <- fromJSON(file = "palette_cerema.json")
paletteCerema
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$principale$bleu,
paletteCerema$principale$orange,
paletteCerema$principale$vert,
colorGrey)
)
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$secondaire$bleu,
paletteCerema$secondaire$orange,
paletteCerema$secondaire$vert,
colorGrey)
)
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$complementaire$bleu,
paletteCerema$complementaire$orange,
paletteCerema$complementaire$vert,
colorGrey)
)
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$secondaire$bleu,
paletteCerema$secondaire$orange,
paletteCerema$secondaire$vert,
colorGrey)
)
hclcolorpicker()
hclcolorpicker
hclcolorpicker
hclcolorpicker
hclcolorpicker
library(tidyverse)
library(sf)
comms <- st_read("../data/COMMUNE_CARTO.shp") %>%
st_set_crs(2154) %>%
st_transform(4326)
comms <- st_read("../data/COMMUNE_CARTO/COMMUNE_CARTO.shp") %>%
st_set_crs(2154) %>%
st_transform(4326)
![](files/data-eng2.png)
setwd("shinyapp")
shiny::runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
runApp('shinyapp')
l <- list.files("notebooks/files/shinyapp/")
l
l <- list.files("notebooks/files/shinyapp/", full.names = T)
l
l <- list.files("*.png", "notebooks/files/shinyapp/", full.names = T)
l
l <- list.files("notebooks/files/shinyapp/", "*.png", full.names = T)
l
paste(l, collapse=" ")
l2 <- paste(l, collapse=" ")
runApp('shinyapp')
l
n <- gsub("^[0-9]+-.*", "\\1", l)
n*
n
n <- gsub(".*/^[0-9]+-.*", "\\1", l)
n
gsub("^.*/[0-9]+-.*", "\\1", l)
gsub("^.*/([0-9]+)-.*", "\\1", l)
n <- gsub("^.*/([0-9]+)-.*", "\\1", l) %>% as.numeric
n <- gsub("^.*/([0-9]+)-.*", "\\1", l) %>% as.numeric
o <- order(n)
l2 <- l[o]
l2
# C:\ImageMagick-7.1.0-Q16-HDRI\magick.exe -delay 100 -loop 0 *.png -morph 10 myimage.gif
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay 50 -loop 0 %s -morph 1 animation.gif", l3)
l3 <- paste(l2, collapse=" ")
l <- list.files("notebooks/files/shinyapp/", "*.png", full.names = T)
n <- gsub("^.*/([0-9]+)-.*", "\\1", l) %>% as.numeric
o <- order(n)
l2 <- l[o]
l3 <- paste(l2, collapse=" ")
# C:\ImageMagick-7.1.0-Q16-HDRI\magick.exe -delay 100 -loop 0 *.png -morph 10 myimage.gif
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay 50 -loop 0 %s -morph 1 animation.gif", l3)
cmd
l <- list.files("notebooks/files/shinyapp/", "*.png")
n <- gsub("^.*/([0-9]+)-.*", "\\1", l) %>% as.numeric
o <- order(n)
l2 <- l[o]
l3 <- paste(l2, collapse=" ")
# C:\ImageMagick-7.1.0-Q16-HDRI\magick.exe -delay 100 -loop 0 *.png -morph 10 myimage.gif
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay 50 -loop 0 %s -morph 1 animation.gif", l3)
cmd
system(cmd)
setwd("notebooks/files/shinyapp/")
system(cmd)
l2
l <- list.files("notebooks/files/shinyapp/", "*.png")
n <- gsub("^.*/([0-9]+)-.*", "\\1", l) %>% as.numeric
o <- order(n)
l2 <- l[o]
l3 <- paste(l2, collapse=" ")
l2
l <- list.files("notebooks/files/shinyapp/", "*.png")
n <- gsub("^.*/([0-9]+)-.*", "\\1", l) %>% as.numeric
o <- order(n)
l2 <- l[o]
l2
l <- list.files("notebooks/files/shinyapp/", "*.png")
n <- gsub("^([0-9]+)-.*", "\\1", l) %>% as.numeric
o <- order(n)
l2 <- l[o]
l2
l
l <- list.files("notebooks/files/shinyapp/", "*.png")
l
setwd("../..")
l <- list.files("notebooks/files/shinyapp/", "*.png")
l
getwd()
setwd("..")
setwd("..")
getwd()
setwd("shiny-artif")
l <- list.files("notebooks/files/shinyapp/", "*.png")
n <- gsub("^([0-9]+)-.*", "\\1", l) %>% as.numeric
o <- order(n)
l2 <- l[o]
l3 <- paste(l2, collapse=" ")
l2
# C:\ImageMagick-7.1.0-Q16-HDRI\magick.exe -delay 100 -loop 0 *.png -morph 10 myimage.gif
# changer le delay
delay <- 50
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d -loop 0 %s -morph 1 animation.gif", delay, l3)
setwd("notebooks/files/shinyapp/")
system(cmd)
l2
l3 <- l[c(17, 18)]
l4 <- paste(l2, collapse=" ")
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d -loop 0 %s -morph 1 animation.gif", delay, l3)
system(cmd)
l4
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d -loop 0 %s -morph 1 animation.gif", delay, l4)
system(cmd)
l4
l4
l4 <- paste(l3, collapse=" ")
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d -loop 0 %s -morph 1 animation.gif", delay, l4)
system(cmd)
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d %s -morph 1 animation.gif", delay, l4)
system(cmd)
l3 <- l2[-c(17, 18)]
l4 <- paste(l3, collapse=" ")
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d %s -morph 1 animation.gif", delay, l4)
system(cmd)
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d %s -morph 3 animation.gif", delay, l4)
system(cmd)
l <- list.files("notebooks/files/shinyapp/", "*.png")
n <- gsub("^([0-9]+)-.*", "\\1", l) %>% as.numeric
o <- order(n)
l2 <- l[o]
l3 <- l2[-c(13, 17, 18)]
l4 <- paste(l3, collapse=" ")
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -resize 200x200 -delay %d %s -morph 3 animation.gif", delay, l4)
system(cmd)
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d -resize 200x200 %s -morph 3 animation.gif", delay, l4)
system(cmd)
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d -resize 200x200 %s -morph 3 animation.gif", delay, l4)
system(cmd)
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d %s -morph 3 animation.gif", delay, l4)
system(cmd)
l4
setwd("..")
getwd()
setwd("../..")
getwd()
l <- list.files("notebooks/files/shinyapp/", "*.png")
n <- gsub("^([0-9]+)-.*", "\\1", l) %>% as.numeric
o <- order(n)
l2 <- l[o]
l3 <- l2[-c(13, 17, 18)]
l4 <- paste(l3, collapse=" ")
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d -resize 500x500 %s -morph 1 animation.gif", delay, l4)
system(cmd)
lk4
l4
# GIF
setwd("notebooks/files/shinyapp/")
delay <- 50
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d -resize 500x500 %s -morph 1 animation.gif", delay, l4)
system(cmd)
l4
getwd()
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d %s -morph 1 animation.gif", delay, l4)
system(cmd)
cmd <- sprintf("C:\\ImageMagick-7.1.0-Q16-HDRI\\magick.exe -delay %d %s -morph 1 -loop 0 animation.gif", delay, l4)
system(cmd)
# Compress
cmd <- "C:\\gifsicle-1.92-win64\\gifsicle-1.92 -O3 --lossy=80 --scale 0.8 animation.gif -o animation-compressed.gif"
system(cmd)
runApp('C:/Users/mathieu.rajerison/Desktop/temp/app')
runApp('C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/shiny-artif/shinyapp')
runApp('C:/Users/mathieu.rajerison/Desktop/temp/app')
runApp('C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/shiny-artif/shinyapp')
rm(list=ls())
shiny::runApp('shinyapp')
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
myCols <-  names(flux)[grep("^art[0-9]{2}\\S+[0-9]{2}$", names(flux))]
myCols
library(knitr)
df <- flux %>% filter(idcom == "13001")
df[, myCols]
library(knitr)
df <- df[, c("idcom", "idcomtxt", myCols)]
df <- gather(df,
"variable", # key
"value",    # value
myCols) # variables
df
unique(df$variable)
df$year <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "20\\1", df$variable)
df$type <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "\\2", df$variable)
df <- df %>% mutate(type = case_when(
type == "hab" ~ "Habitat",
type == "act" ~ "Activité",
type == "mix" ~ "Mixte",
type == "inc" ~ "Inconnu",
))
df$variable <- NULL
getStatsFlux <- function(flux, codeInsee) {
# Filtre par commune
df <- flux %>% filter(idcom == codeInsee)
# Colonnes intéressantes
myCols <-  names(flux)[grep("^art[0-9]{2}\\S+[0-9]{2}$", names(flux))]
df <- df[, c("idcom", "idcomtxt", myCols)]
# Long format
df <- df %>% gather("variable", # key
"value",    # value
myCols) # variables
# Année et type
df$year <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "20\\1", df$variable)
df$type <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "\\2", df$variable)
# Renomme les valeurs de type
df <- df %>% mutate(type = case_when(
type == "hab" ~ "Habitat",
type == "act" ~ "Activité",
type == "mix" ~ "Mixte",
type == "inc" ~ "Inconnu"))
# Réagence les colonnes
df <- df[, c("idcom", "idcomtxt", "year", "type", "value")]
return(df)
}
flux %>% getStatsFlux("13001")
library(knitr)
df <- flux %>% filter(idcom == "13001")
df[, c(idcom, myCols)]
library(knitr)
df <- flux %>% filter(idcom == "13001")
df[, c("idcom", myCols)]
library(knitr)
df <- flux %>% filter(idcom == "13001")
df[, c("idcom", "idcomtxt", myCols)]
df
devtools::install_github("hrbrmstr/streamgraph")
shiny::runApp('shinyapp')
l <- list.files("*.html", "notebooks")
l
?list.files
l <- list.files("notebooks", "*.html|*.Rmd")
l
l <- list.files("notebooks", "*.html|*.Rmd|*.rds|*.json|*.R", full.names = T)
l
gsub("^.*/(.*)$", "\\1", l[1])
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.copy("../datagistips.github.io/dataviz-masterclass/notebooks/", fileName)
file.copy(from, to)
}
fileName
to <- file.copy("../datagistips.github.io/dataviz-masterclass/notebooks/", fileName)
to
to <- file.path("../datagistips.github.io/dataviz-masterclass/notebooks/", fileName)
to
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.path("../datagistips.github.io/dataviz-masterclass/notebooks/", fileName)
file.copy(from, to)
}
from
to
?file.copy
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.path("../datagistips.github.io/dataviz-masterclass/notebooks/", fileName)
file.copy(from, to, overwrite = T)
}
file.copy("notebooks/files",
"../datagistips.github.io/dataviz-masterclass/notebooks/",
recursive = TRUE, overwrite = T)
# Copy notebooks files
file.copy("notebooks/files",
"../datagistips.github.io/dataviz-masterclass/notebooks/",
recursive = TRUE, overwrite = T)
# Copy notebooks archives
file.copy("notebooks/archives",
"../datagistips.github.io/dataviz-masterclass/notebooks/",
recursive = TRUE, overwrite = T)
file.copy("notebooks/files",
"../datagistips.github.io/dataviz-masterclass/notebooks/",
recursive = TRUE, overwrite = T)
# Copy archives dir.
file.copy("notebooks/archives",
"../datagistips.github.io/dataviz-masterclass/notebooks/",
recursive = TRUE, overwrite = T)
library(rjson)
library(tidyverse)
library(glue)
# Sys.setenv(http_proxy="http://direct1.proxy.i2:8080")
# options(rsconnect.http.trace = TRUE, rsconnect.error.trace = TRUE, rsconnect.http.verbose = TRUE)
source("helpers.R")
options(warn=-1)
## SETTINGS -----------------
PLATFORM <- "prod"
APP_DIR         <<- "shinyapp"
APP_NAME        <<- "shiny-artif"
TOKEN_RSCONNECT <<- rjson::fromJSON(file="rsconnect.json")
## PLATFORMS -----------
deploy_myapp <- function(APP_NAME, PLATFORM) {
if(PLATFORM != "prod") {
APP_NAME <- glue("{APP_NAME}-{PLATFORM}")
}
message("Deploiement vers ", APP_NAME)
deploy_app(APP_NAME, APP_DIR, TOKEN_RSCONNECT, launch_browser = FALSE)
}
## DEPLOY -----------
deploy_myapp(APP_NAME, "prod")
library(rjson)
library(tidyverse)
library(glue)
# Sys.setenv(http_proxy="http://direct1.proxy.i2:8080")
# options(rsconnect.http.trace = TRUE, rsconnect.error.trace = TRUE, rsconnect.http.verbose = TRUE)
source("helpers.R")
options(warn=-1)
## SETTINGS -----------------
PLATFORM <- "prod"
APP_DIR         <<- "shinyapp"
APP_NAME        <<- "shiny-artif"
TOKEN_RSCONNECT <<- rjson::fromJSON(file="rsconnect.json")
## PLATFORMS -----------
deploy_myapp <- function(APP_NAME, PLATFORM) {
if(PLATFORM != "prod") {
APP_NAME <- glue("{APP_NAME}-{PLATFORM}")
}
message("Deploiement vers ", APP_NAME)
deploy_app(APP_NAME, APP_DIR, TOKEN_RSCONNECT, launch_browser = FALSE)
}
## DEPLOY -----------
deploy_myapp(APP_NAME, "prod")
library(rjson)
library(tidyverse)
library(glue)
# Sys.setenv(http_proxy="http://direct1.proxy.i2:8080")
# options(rsconnect.http.trace = TRUE, rsconnect.error.trace = TRUE, rsconnect.http.verbose = TRUE)
source("helpers.R")
options(warn=-1)
## SETTINGS -----------------
PLATFORM <- "prod"
APP_DIR         <<- "shinyapp"
APP_NAME        <<- "shiny-artif"
TOKEN_RSCONNECT <<- rjson::fromJSON(file="rsconnect.json")
## PLATFORMS -----------
deploy_myapp <- function(APP_NAME, PLATFORM) {
if(PLATFORM != "prod") {
APP_NAME <- glue("{APP_NAME}-{PLATFORM}")
}
message("Deploiement vers ", APP_NAME)
deploy_app(APP_NAME, APP_DIR, TOKEN_RSCONNECT, launch_browser = FALSE)
}
## DEPLOY -----------
deploy_myapp(APP_NAME, "prod")
library(rjson)
library(tidyverse)
library(glue)
# Sys.setenv(http_proxy="http://direct1.proxy.i2:8080")
# options(rsconnect.http.trace = TRUE, rsconnect.error.trace = TRUE, rsconnect.http.verbose = TRUE)
source("helpers.R")
options(warn=-1)
## SETTINGS -----------------
PLATFORM <- "prod"
APP_DIR         <<- "shinyapp"
APP_NAME        <<- "shiny-artif"
TOKEN_RSCONNECT <<- rjson::fromJSON(file="rsconnect.json")
## PLATFORMS -----------
deploy_myapp <- function(APP_NAME, PLATFORM) {
if(PLATFORM != "prod") {
APP_NAME <- glue("{APP_NAME}-{PLATFORM}")
}
message("Deploiement vers ", APP_NAME)
deploy_app(APP_NAME, APP_DIR, TOKEN_RSCONNECT, launch_browser = FALSE)
}
## DEPLOY -----------
deploy_myapp(APP_NAME, "prod")
library(rjson)
library(tidyverse)
library(glue)
# Sys.setenv(http_proxy="http://direct1.proxy.i2:8080")
# options(rsconnect.http.trace = TRUE, rsconnect.error.trace = TRUE, rsconnect.http.verbose = TRUE)
source("helpers.R")
options(warn=-1)
## SETTINGS -----------------
PLATFORM <- "prod"
APP_DIR         <<- "shinyapp"
APP_NAME        <<- "shiny-artif"
TOKEN_RSCONNECT <<- rjson::fromJSON(file="rsconnect.json")
## PLATFORMS -----------
deploy_myapp <- function(APP_NAME, PLATFORM) {
if(PLATFORM != "prod") {
APP_NAME <- glue("{APP_NAME}-{PLATFORM}")
}
message("Deploiement vers ", APP_NAME)
deploy_app(APP_NAME, APP_DIR, TOKEN_RSCONNECT, launch_browser = FALSE)
}
## DEPLOY -----------
deploy_myapp(APP_NAME, "prod")
library(rjson)
library(tidyverse)
library(glue)
# Sys.setenv(http_proxy="http://direct1.proxy.i2:8080")
# options(rsconnect.http.trace = TRUE, rsconnect.error.trace = TRUE, rsconnect.http.verbose = TRUE)
source("helpers.R")
options(warn=-1)
## SETTINGS -----------------
PLATFORM <- "prod"
APP_DIR         <<- "shinyapp"
APP_NAME        <<- "shiny-artif"
TOKEN_RSCONNECT <<- rjson::fromJSON(file="rsconnect.json")
## PLATFORMS -----------
deploy_myapp <- function(APP_NAME, PLATFORM) {
if(PLATFORM != "prod") {
APP_NAME <- glue("{APP_NAME}-{PLATFORM}")
}
message("Deploiement vers ", APP_NAME)
deploy_app(APP_NAME, APP_DIR, TOKEN_RSCONNECT, launch_browser = FALSE)
}
## DEPLOY -----------
deploy_myapp(APP_NAME, "prod")
library(rjson)
library(tidyverse)
library(glue)
# Sys.setenv(http_proxy="http://direct1.proxy.i2:8080")
# options(rsconnect.http.trace = TRUE, rsconnect.error.trace = TRUE, rsconnect.http.verbose = TRUE)
source("helpers.R")
options(warn=-1)
## SETTINGS -----------------
PLATFORM <- "prod"
APP_DIR         <<- "shinyapp"
APP_NAME        <<- "shiny-artif"
TOKEN_RSCONNECT <<- rjson::fromJSON(file="rsconnect.json")
## PLATFORMS -----------
deploy_myapp <- function(APP_NAME, PLATFORM) {
if(PLATFORM != "prod") {
APP_NAME <- glue("{APP_NAME}-{PLATFORM}")
}
message("Deploiement vers ", APP_NAME)
deploy_app(APP_NAME, APP_DIR, TOKEN_RSCONNECT, launch_browser = FALSE)
}
## DEPLOY -----------
deploy_myapp(APP_NAME, "prod")
