source("helpers.R")
options(warn=-1)
## SETTINGS -----------------
PLATFORM <- "prod"
APP_DIR         <<- "shinyapp"
APP_NAME        <<- "shiny-artif"
TOKEN_RSCONNECT <<- rjson::fromJSON(file="rsconnect.json")
## PLATFORMS -----------
deploy_myapp <- function(APP_NAME, PLATFORM) {
if(PLATFORM != "prod") {
APP_NAME <- glue("{APP_NAME}-{PLATFORM}")
}
message("Deploiement vers ", APP_NAME)
deploy_app(APP_NAME, APP_DIR, TOKEN_RSCONNECT, launch_browser = FALSE)
}
## DEPLOY -----------
deploy_myapp(APP_NAME, "prod")
# Copy notebooks files
l <- list.files("notebooks", "*.html|*.Rmd|*.rds|*.json|*.R", full.names = T)
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.path("../datagistips.github.io/dataviz-masterclass/notebooks/", fileName)
file.copy(from, to, overwrite = T)
}
# Copy files dir.
file.copy("notebooks/files",
"../datagistips.github.io/dataviz-masterclass/notebooks/",
recursive = TRUE, overwrite = T)
# Copy archives dir.
file.copy("notebooks/archives",
"../datagistips.github.io/dataviz-masterclass/notebooks/",
recursive = TRUE, overwrite = T)
shiny::runApp('shinyapp')
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
myCols <-  names(flux)[grep("^art[0-9]{2}\\S+[0-9]{2}$", names(flux))]
myCols
df <- flux %>% filter(idcom == "13001")
df[, c("idcom", "idcomtxt", myCols)]
df <- df[, c("idcom", "idcomtxt", myCols)]
df <- gather(df,
"variable", # key
"value",    # value
myCols) # variables
df
unique(df$variable)
df$year <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "20\\1", df$variable)
df$type <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "\\2", df$variable)
df %>% head
df <- df %>% mutate(type = case_when(
type == "hab" ~ "Habitat",
type == "act" ~ "Activité",
type == "mix" ~ "Mixte",
type == "inc" ~ "Inconnu",
))
df$variable <- NULL
df
getStatsFlux <- function(flux, codeInsee) {
# Filtre par commune
df <- flux %>% filter(idcom == codeInsee)
# Colonnes intéressantes
myCols <-  names(flux)[grep("^art[0-9]{2}\\S+[0-9]{2}$", names(flux))]
df <- df[, c("idcom", "idcomtxt", myCols)]
# Long format
df <- df %>% gather("variable", # key
"value",    # value
myCols) # variables
# Année et type
df$year <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "20\\1", df$variable)
df$type <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "\\2", df$variable)
# Renomme les valeurs de type
df <- df %>% mutate(type = case_when(
type == "hab" ~ "Habitat",
type == "act" ~ "Activité",
type == "mix" ~ "Mixte",
type == "inc" ~ "Inconnu"))
# Réagence les colonnes
df <- df[, c("idcom", "idcomtxt", "year", "type", "value")]
return(df)
}
flux %>% getStatsFlux("13001")
flux %>% getStatsFlux("13055")
flux %>% getStatsFlux("91800")
flux %>% getStatsFlux("83137")
df <- data.frame(variable = c("Habitat", "Activité", "Mixte", "Inconnu"),
value = c(100, 95, 105, 98))
library(ggplot2)
ggplot(df, aes(x = variable,
y = value,
fill = variable)) +
geom_bar(stat = "identity", width = 1)
ggplot(df, aes(x = "",
y = value,
fill = variable)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0)
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
source("helpers.R", encoding = "UTF-8")
df <- flux %>% getStatsFlux("13001")
library(ggplot2)
p <- ggplot(data = df,
aes(x = year,
y = value,
fill = type)) +
geom_bar(stat = "identity")
p
# Ordre des types
df$type <- as.character(df$type)
df$type <- factor(df$type, levels = c("Habitat", "Activité", "Mixte", "Inconnu"))
# Plot
p <- ggplot(data = df,
aes(x = year,
y = value,
fill = type)) +
geom_bar(stat = "identity") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(vjust = 3),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = 10, colour = "grey60"),
legend.text = element_text(size = 8)
) +
ggtitle("Flux d'artificialisation par année en Ha") +
scale_y_continuous(name = "Ha", expand = c(0, 0))
p
library(colorspace)
colorBlue    <- hcl(h = 220,
c = 50,
l = 80, fixup = TRUE)
colorRed     <- hcl(h = 4,
c = 50,
l = 80, fixup = TRUE)
colorMagenta <- hcl(h = 300,
c = 50,
l = 80, fixup = TRUE)
colorGrey    <- hcl(h = 0,
c = 0,
l = 80, fixup = TRUE)
myPalette <- c("blue" = colorBlue,
"red" = colorRed,
"magenta" = colorMagenta,
"grey" = colorGrey)
hclcolorpicker
demoplot(myPalette, "bar")
hclplot(myPalette)
p +
scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = as.character(myPalette)
)
saveRDS(myPalette, "myPalette.rds")
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(colorBlue,
colorRed,
hcl(h = 300, c = 100, l = 80), # Magenta
colorGrey)
)
library(rjson)
paletteCerema <- fromJSON(file = "palette_cerema.json")
paletteCerema
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$secondaire$bleu,
paletteCerema$secondaire$orange,
paletteCerema$secondaire$vert,
colorGrey)
)
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
source("helpers.R", encoding = "UTF-8")
df <- flux %>% getStatsFlux("13001")
library(ggplot2)
p <- ggplot(data = df,
aes(x = year,
y = value,
fill = type)) +
geom_bar(stat = "identity")
p
# Ordre des types
df$type <- as.character(df$type)
df$type <- factor(df$type, levels = c("Habitat", "Activité", "Mixte", "Inconnu"))
# Plot
p <- ggplot(data = df,
aes(x = year,
y = value,
fill = type)) +
geom_bar(stat = "identity") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(vjust = 3),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = 10, colour = "grey60"),
legend.text = element_text(size = 8)
) +
ggtitle("Flux d'artificialisation par année en Ha") +
scale_y_continuous(name = "Ha", expand = c(0, 0))
p
library(colorspace)
colorBlue    <- hcl(h = 220,
c = 50,
l = 80, fixup = TRUE)
colorRed     <- hcl(h = 4,
c = 50,
l = 80, fixup = TRUE)
colorMagenta <- hcl(h = 300,
c = 50,
l = 80, fixup = TRUE)
colorGrey    <- hcl(h = 0,
c = 0,
l = 80, fixup = TRUE)
myPalette <- c("blue" = colorBlue,
"red" = colorRed,
"magenta" = colorMagenta,
"grey" = colorGrey)
demoplot(myPalette, "bar")
hclplot(myPalette)
p +
scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = as.character(myPalette)
)
saveRDS(myPalette, "myPalette.rds")
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(colorBlue,
colorRed,
hcl(h = 300, c = 100, l = 80), # Magenta
colorGrey)
)
library(rjson)
paletteCerema <- fromJSON(file = "palette_cerema.json")
paletteCerema
p + scale_fill_manual(
name = "Flux\nd'artificialisation\n2009-2020",
labels = c("Habitat", "Activité", "Mixte", "Inconnu"),
values = c(paletteCerema$secondaire$bleu,
paletteCerema$secondaire$orange,
paletteCerema$secondaire$vert,
colorGrey)
)
myPalette
hclcolorpicker()
# Copy notebooks files
l <- list.files("notebooks", "*.html|*.Rmd|*.rds|*.json|*.R", full.names = T)
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.path("../datagistips.github.io/dataviz-masterclass/notebooks/", fileName)
file.copy(from, to, overwrite = T)
}
# Copy files dir.
file.copy("notebooks/files",
"../datagistips.github.io/dataviz-masterclass/notebooks/",
recursive = TRUE, overwrite = T)
# Copy archives dir.
file.copy("notebooks/archives",
"../datagistips.github.io/dataviz-masterclass/notebooks/",
recursive = TRUE, overwrite = T)
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
myCols <-  names(flux)[grep("^art[0-9]{2}\\S+[0-9]{2}$", names(flux))]
myCols
df <- flux %>% filter(idcom == "13001")
df[, c("idcom", "idcomtxt", myCols)]
df <- df[, c("idcom", "idcomtxt", myCols)]
df <- gather(df,
"variable", # key
"value",    # value
myCols) # variables
df
unique(df$variable)
df$year <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "20\\1", df$variable)
df$type <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "\\2", df$variable)
df %>% head
df <- df %>% mutate(type = case_when(
type == "hab" ~ "Habitat",
type == "act" ~ "Activité",
type == "mix" ~ "Mixte",
type == "inc" ~ "Inconnu",
))
df$variable <- NULL
df
getStatsFlux <- function(flux, codeInsee) {
# Filtre par commune
df <- flux %>% filter(idcom == codeInsee)
# Colonnes intéressantes
myCols <-  names(flux)[grep("^art[0-9]{2}\\S+[0-9]{2}$", names(flux))]
df <- df[, c("idcom", "idcomtxt", myCols)]
# Long format
df <- df %>% gather("variable", # key
"value",    # value
myCols) # variables
# Année et type
df$year <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "20\\1", df$variable)
df$type <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "\\2", df$variable)
# Renomme les valeurs de type
df <- df %>% mutate(type = case_when(
type == "hab" ~ "Habitat",
type == "act" ~ "Activité",
type == "mix" ~ "Mixte",
type == "inc" ~ "Inconnu"))
# Réagence les colonnes
df <- df[, c("idcom", "idcomtxt", "year", "type", "value")]
return(df)
}
flux %>% getStatsFlux("13001")
df <- flux %>% filter(idcom == "13001")
df[, c("idcom", "idcomtxt", myCols)]
df
names(df)
runApp('shinyapp')
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
myCols <-  names(flux)[grep("^art[0-9]{2}\\S+[0-9]{2}$", names(flux))]
myCols
df <- flux %>% filter(idcom == "13001")
df[, c("idcom", "idcomtxt", myCols)]
df <- df[, c("idcom", "idcomtxt", myCols)]
df <- gather(df,
"variable", # key
"value",    # value
myCols) # variables
df
unique(df$variable)
df$year <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "20\\1", df$variable)
df$type <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "\\2", df$variable)
df %>% head
df <- df %>% mutate(type = case_when(
type == "hab" ~ "Habitat",
type == "act" ~ "Activité",
type == "mix" ~ "Mixte",
type == "inc" ~ "Inconnu",
))
df$variable <- NULL
df
getStatsFlux <- function(flux, codeInsee) {
# Filtre par commune
df <- flux %>% filter(idcom == codeInsee)
# Colonnes intéressantes
myCols <-  names(flux)[grep("^art[0-9]{2}\\S+[0-9]{2}$", names(flux))]
df <- df[, c("idcom", "idcomtxt", myCols)]
# Long format
df <- df %>% gather("variable", # key
"value",    # value
myCols) # variables
# Année et type
df$year <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "20\\1", df$variable)
df$type <- gsub("art([0-9]{2})(\\S+)[0-9]{2}", "\\2", df$variable)
# Renomme les valeurs de type
df <- df %>% mutate(type = case_when(
type == "hab" ~ "Habitat",
type == "act" ~ "Activité",
type == "mix" ~ "Mixte",
type == "inc" ~ "Inconnu"))
# Réagence les colonnes
df <- df[, c("idcom", "idcomtxt", "year", "type", "value")]
return(df)
}
flux %>% getStatsFlux("13001")
df <- flux %>% filter(idcom == "13001")
df[, c("idcom", "idcomtxt", myCols)]
names(flux)
flux %>% getStatsFlux("13055")
flux %>% getStatsFlux("83137")
names(flux)
grep("^art.*", names(flux))
names(flux)[grep("^art.*", names(flux))]
names(flux)[grep("^art.*hab.*$", names(flux))]
names(flux)[grep("^art[0-9]{2}hab[0-9]{2}$", names(flux))]
df <- data.frame(variable = c("Habitat", "Activité", "Mixte", "Inconnu"),
value = c(100, 95, 105, 98))
df
library(tidyverse)
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
source("helpers.R", encoding = "UTF-8")
df <- flux %>% getStatsFlux("13001")
View(df)
hcolorpicker
hclcolorpicker()
library(tidyverse)
source("helpers.R", encoding = "UTF-8")
flux <- read_csv("../data/obs_artif_conso_com_2009_2020_V2.csv")
myPalette <- readRDS("myPalette.rds")
df <- flux %>% getStatsFlux("13001")
library(streamgraph)
# L'ordre des inverse dans les streamgraphs
df$type <- factor(df$type, levels = c("Inconnu", "Mixte", "Activité", "Habitat"))
# Plot
df %>%
streamgraph("type", "value", "year", sort = FALSE) %>%
sg_axis_x(1, "Année", "%Y") %>%
sg_fill_manual(rev(myPalette))
makeStream <- function(flux, codeInsee) {
df <- flux %>% getStatsFlux(codeInsee)
# L'ordre des inverse dans les streamgraphs
df$type <- factor(df$type, levels = c("Inconnu", "Mixte", "Activité", "Habitat"))
# Plot
df %>%
streamgraph("type", "value", "year", sort = FALSE) %>%
sg_axis_x(1, "Année", "%Y") %>%
sg_fill_manual(rev(myPalette))
}
flux %>% makeStream("13055")
flux %>% makeStream("83137")
flux %>% makeStream("13055")
runApp('D:/monapp')
runApp('D:/monapp2')
runApp('D:/monapp2')
# Copy archives dir.
file.copy("notebooks/archives",
"destDir",
recursive = TRUE, overwrite = T)
# Copy notebooks files
l <- list.files("notebooks", "*.html|*.Rmd|*.rds|*.json|*.R|*.md", full.names = T)
destDir <- "../datagistips.github.io/dataviz-masterclass/"
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.path(destDir, fileName)
file.copy(from, to, overwrite = T)
}
# Copy files dir.
file.copy("notebooks/files",
destDir,
recursive = TRUE, overwrite = T)
# Copy archives dir.
file.copy("notebooks/archives",
"destDir",
recursive = TRUE, overwrite = T)
# Copy notebooks files
l <- list.files("notebooks", "*.html|*.Rmd|*.rds|*.json|*.R|*.md", full.names = T)
destDir <- "../datagistips.github.io/dataviz-masterclass/"
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.path(destDir, fileName)
file.copy(from, to, overwrite = T)
}
# Copy files dir.
file.copy("notebooks/files",
destDir,
recursive = TRUE, overwrite = T)
# Copy archives dir.
file.copy("notebooks/archives",
"destDir",
recursive = TRUE, overwrite = T)
# Copy notebooks files
l <- list.files("notebooks", "*.html|*.Rmd|*.rds|*.json|*.R|*.md", full.names = T)
destDir <- "../datagistips.github.io/dataviz-masterclass/"
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.path(destDir, fileName)
file.copy(from, to, overwrite = T)
}
# Copy files dir.
file.copy("notebooks/files",
destDir,
recursive = TRUE, overwrite = T)
# Copy archives dir.
file.copy("notebooks/archives",
"destDir",
recursive = TRUE, overwrite = T)
# Copy notebooks files
l <- list.files("notebooks", "*.html|*.Rmd|*.rds|*.json|*.R|*.md", full.names = T)
destDir <- "../datagistips.github.io/dataviz-masterclass/"
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.path(destDir, fileName)
file.copy(from, to, overwrite = T)
}
# Copy files dir.
file.copy("notebooks/files",
destDir,
recursive = TRUE, overwrite = T)
# Copy archives dir.
file.copy("notebooks/archives",
"destDir",
recursive = TRUE, overwrite = T)
# Copy notebooks files
l <- list.files("notebooks", "*.html|*.Rmd|*.rds|*.json|*.R|*.md", full.names = T)
destDir <- "../datagistips.github.io/dataviz-masterclass/"
for(from in l) {
fileName <- gsub("^.*/(.*)$", "\\1", from)
to <- file.path(destDir, fileName)
file.copy(from, to, overwrite = T)
}
# Copy files dir.
file.copy("notebooks/files",
destDir,
recursive = TRUE, overwrite = T)
# Copy archives dir.
file.copy("notebooks/archives",
"destDir",
recursive = TRUE, overwrite = T)
